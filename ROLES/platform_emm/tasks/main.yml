---
# tasks file for master
- name: Load enviroment file
  include_vars: ../ENV_INFO/emm.yml
- name: Get hostname
  shell: hostname
  register: hostname
- name: include vars specific to hostname
  include_vars:
      dir: ../../../ENV_INFO/
      files_matching: "{{ hostname.stdout }}"
- name: Get EM20 Installation Tool version
  shell: ls -td {{ working_dir }}/CXP* | head -1
  register: version
- name: Go to template path & create platform ini
  shell:
      chdir: '{{ version.stdout }}/templates/Linux'
      cmd: cp -p {{ platform_template }}.eric {{ platform_template }}
#- name: Copy the platform script
#  copy: src=Install_Platform.sh dest={{ version.stdout }}/ backup=yes
- name: Comment out Edittemplate in Install_Platform.sh to skip user iteraction
  replace: 
    dest: '{{ version.stdout }}/Install_Platform.sh'
    regexp: '(.*Edittemplate.*)'
    replace: '# \1'
    backup: yes
- name: Update the cps ini file for ONM Bond
  ini_file:
      path: '{{ version.stdout }}/templates/Linux/{{ platform_template }}'
      section: ONM Bond
      option: "{{item.key}}"
      value: "{{item.value}}"
      no_extra_spaces: yes
  with_dict: {bonding_interface_primary_ONM: "{{ bonding_interface_primary_ONM }}",bonding_interface_standby_ONM: "{{ bonding_interface_standby_ONM | default() }}"}
  when: " not item.value == '' "
- name: Update the ini file for Traffic Bond
  ini_file:
      path: '{{ version.stdout }}/templates/Linux/{{ platform_template }}'
      section: Traffic Bond
      option: "{{item.key}}"
      value: "{{item.value}}"
      no_extra_spaces: yes
  with_dict: {bonding_interface_primary_Traffic: "{{ bonding_interface_primary_Traffic | default()}}",bonding_interface_standby_Traffic: "{{ bonding_interface_standby_Traffic | default() }}"}
  when: " not item.value == '' "
- name: Update the ini file for Interface IP
  ini_file:
      path: '{{ version.stdout }}/templates/Linux/{{ platform_template }}'
      section: Interface IP
      option: "{{item.key}}"
      value: "{{item.value}}"
      no_extra_spaces: yes
  with_dict: {bonding_interface_ip_ONM: "{{ bonding_interface_ip_ONM }}",netmask_ONM: "{{ netmask_ONM }}",default_gateway_ip_ONM: "{{ default_gateway_ip_ONM | default() }}" , bonding_interface_ip_Traffic: "{{ bonding_interface_ip_Traffic | default() }}", netmask_Traffic: "{{ netmask_Traffic | default() }}", default_gateway_ip_Traffic: "{{ default_gateway_ip_Traffic | default() }}"}
  when: " not item.value == '' "
- name: Update the ini file for {{ deployment }}
  ini_file:
      path: '{{ version.stdout }}/templates/Linux/{{ platform_template }}'
      section: Cluster
      option: "{{item.key}}"
      value: "{{item.value}}"
      no_extra_spaces: yes
  with_dict: {Cluster_ID: "{{ Cluster_ID | default() }}",Cluster_Name: "{{ Cluster_Name | default() }}",HeartBeat_Link_1: "{{ HeartBeat_Link_1 | default() }}",HeartBeat_Link_2: "{{ HeartBeat_Link_2 | default() }}",IO_Fencing_Type: "{{ IO_Fencing_Type | default() }}",NFS_Server_Version_for_MMDB: "{{ NFS_Server_Version_for_MMDB | default() }}",NFS_Share_IP_for_MMDB: "{{ NFS_Share_IP_for_MMDB | default() }}",MMDB_NFS_Share_Name: "{{ MMDB_NFS_Share_Name | default() }}",NFS_Server_Version_for_MMStorage: "{{ NFS_Server_Version_for_MMStorage | default() }}",NFS_Share_IP_for_MMStorage: "{{ NFS_Share_IP_for_MMStorage | default() }}",MMStorage_NFS_Share_Name: "{{ MMStorage_NFS_Share_Name | default() }}",other_hosts_ONM: "{{ other_hosts_ONM | default() }}",other_hosts_Traffic: "{{ other_hosts_Traffic | default() }}"}
  when: " not item.value == '' "
- name: Update the ini file for NTPConfig
  ini_file:
      path: '{{ version.stdout }}/templates/Linux/{{ platform_template }}'
      section: NTPConfig
      option: "{{item.key}}"
      value: "{{item.value}}"
      no_extra_spaces: yes
  with_dict: {NTP_Server_IP: "{{ NTP_Server_IP | default() }}"}
  when: " not item.value == '' "
- name: Copy automation script
  copy: src=install_updated.sh dest={{ version.stdout }}/
- name: Temporary change permissions of /etc directory if CPS IO Fencing to be able to copy cp_server_ip file
  shell: sudo chmod 777 /etc/
  when: ansible_facts['IO_Fencing_Type'] == "CPS"
- name: Copy the cp_server_ip file with the CPS IPs (required by libfunc_cps_platform.sh)
  copy: src=../../../ENV_INFO/cp_server_ip dest=/etc/cp_server_ip
  when: ansible_facts['IO_Fencing_Type'] == "CPS"
- name: Restore permissions of /etc directory
  shell: sudo chmod 755 /etc/
  when: ansible_facts['IO_Fencing_Type'] == "CPS"
- name: Execute the EMM platform script - check logs in /var/adm/MM_LOGS/Platform
  shell: sh ./install_updated.sh {{ deployment }} {{ storage }} '{{ other_options }}' 
  #shell: sleep 50s
  args:
    chdir: '{{ version.stdout }}'
  #ignore_errors: true
  ignore_unreachable: true
  
